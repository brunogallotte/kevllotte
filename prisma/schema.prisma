generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  username      String         @unique
  password      String         @map("password_hash")
  bio           String?
  avatarUrl     String?        @map("avatar_url")
  linkedinUrl   String?        @map("linkedin_url")
  githubUrl     String?        @map("github_url")
  instagramUrl  String?        @map("instagram_url")
  twitterUrl    String?        @map("twitter_url")
  websiteUrl    String?        @map("website_url")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  posts         Post[]
  followers     Follower[]     @relation("followers")
  following     Follower[]     @relation("following")
  savedPosts    SavedPost[]
  likedPosts    PostLike[]
  postComments  PostComment[]
  notifications Notification[]
  commentLikes  CommentLike[]

  @@map("users")
}

model Follower {
  id              String   @id @default(uuid())
  followerUserId  String   @map("follower_user_id")
  followingUserId String   @map("following_user_id")
  createdAt       DateTime @default(now()) @map("created_at")
  follower        User     @relation("followers", fields: [followerUserId], references: [id])
  followingUser   User     @relation("following", fields: [followingUserId], references: [id])

  @@map("followers")
}

model Post {
  id           String        @id @default(uuid())
  title        String
  content      String
  userId       String        @map("user_id")
  collabId     String?       @map("collab_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  status       PostStatus    @default(DRAFT)
  slug         String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedPosts   SavedPost[]
  likes        PostLike[]
  postComments PostComment[]
  postTags     Tag[]

  @@map("posts")
}

model SavedPost {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  postId    String   @unique @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("saved_posts")
}

model PostLike {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("posts_like")
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  commentId String   @map("comment_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User        @relation(fields: [userId], references: [id])
  comment PostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("comments_like")
}

model PostComment {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  replyToId String?
  replyTo   PostComment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   PostComment[] @relation("ReplyTo")

  user  User          @relation(fields: [userId], references: [id])
  post  Post          @relation(fields: [postId], references: [id])
  likes CommentLike[]

  @@map("posts_comment")
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  post   Post   @relation(fields: [postId], references: [id])
  postId String @map("post_id")

  @@map("tags")
}

model Notification {
  id        String   @id @default(uuid())
  content   String
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum PostStatus {
  DRAFT
  PUBLISHED
}
